{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SmartHomeDIY This project is a DIY home automation framework. With this system you will be able to control your home lights, Air conditioning, TV, water heater any many more devices (IR, wall sockets, and light switches are only a few). The system is Arduino and Raspberry Pi based. You will be able to control your house from the internal WiFi network as well as from the Internet. For internet access you will have to use a DNS service such as no-ip You can have multiple Arduino stations controlling anything at you home. Control is done via your phone, iPad or Desktop(currently using a web page only). Other Home automation systems Home Assistant OpenHab Why This system Hardware and software open source. Simple communication protocol. Ability the spread the system at your home with in multiple ways to get good Wireless communications range. Simple control from any device (browser) with mobile support. Easy API for external apps to activate commands such as IFTTT Installing the framework @ your home Installing this framework will require knowledge with Basic electronics, soldering. Installing the light switch control stations will require in experience with High voltage 220V/120V circuits . If you do not know how to handle High Voltage, please do not! . But the good news you can still use The IR stations to control AC, TV and such. The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe. If you are a developer and would like to contribute to the code Checkout the documentation here if you are a user wishing to use the platform at your own hose Checkout the documentation here","title":"Welcome"},{"location":"#welcome-to-smarthomediy","text":"This project is a DIY home automation framework. With this system you will be able to control your home lights, Air conditioning, TV, water heater any many more devices (IR, wall sockets, and light switches are only a few). The system is Arduino and Raspberry Pi based. You will be able to control your house from the internal WiFi network as well as from the Internet. For internet access you will have to use a DNS service such as no-ip You can have multiple Arduino stations controlling anything at you home. Control is done via your phone, iPad or Desktop(currently using a web page only).","title":"Welcome to SmartHomeDIY"},{"location":"#other-home-automation-systems","text":"Home Assistant OpenHab","title":"Other Home automation systems"},{"location":"#why-this-system","text":"Hardware and software open source. Simple communication protocol. Ability the spread the system at your home with in multiple ways to get good Wireless communications range. Simple control from any device (browser) with mobile support. Easy API for external apps to activate commands such as IFTTT","title":"Why This system"},{"location":"#installing-the-framework-your-home","text":"Installing this framework will require knowledge with Basic electronics, soldering. Installing the light switch control stations will require in experience with High voltage 220V/120V circuits . If you do not know how to handle High Voltage, please do not! . But the good news you can still use The IR stations to control AC, TV and such. The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe. If you are a developer and would like to contribute to the code Checkout the documentation here if you are a user wishing to use the platform at your own hose Checkout the documentation here","title":"Installing the framework @ your home"},{"location":"Developers/","text":"Developers Code layout The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe. Tasks Bugs This Project is managed with trello For issues and bugs please open on Github System layout Controlling you home is done via a web application from your phone browser or any other browser. The web application is hosted on a Raspberry Pi station, running Nodejs. Nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. Flashing remote station from 'Visual Studio Code' script (task) TBD `Connect Flasher to computer `Ctrl+P and select Set remote Address this will set remote address to the Flasher. `Upload sketch (this will forward the sketch to the remote station with the specified address) IR Universal Station ( Broadlink or Harmony hub like) PI Server with node and serial commands sent using bt to bt to rf24 gateway/dispatch station Gateway: BT to rf24 dispatch system Bootloader with OTA Capabilities `ctrl+p Compile Bootloader with OTA Capabilities You have to bootloader option: with auto reset option and without auto reset option - to learn more read [Here] about Arduino watchdog timer. `ctrl+p Burn the compiled bootloader using the AVR flasher to learn more read [Here]. My YouTube video to get more info. Also read here to get a better understanding Bootloader modifications for OTA How to install Download and install Visual Studio code git clone https://github.com/benchuk/SmartHomeDIY.git - clone project. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Developers"},{"location":"Developers/#developers","text":"","title":"Developers"},{"location":"Developers/#code-layout","text":"The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe.","title":"Code layout"},{"location":"Developers/#tasks-bugs","text":"This Project is managed with trello For issues and bugs please open on Github","title":"Tasks &amp; Bugs"},{"location":"Developers/#system-layout","text":"Controlling you home is done via a web application from your phone browser or any other browser. The web application is hosted on a Raspberry Pi station, running Nodejs. Nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle.","title":"System layout"},{"location":"Developers/#flashing-remote-station-from-visual-studio-code-script-task-tbd","text":"`Connect Flasher to computer `Ctrl+P and select Set remote Address this will set remote address to the Flasher. `Upload sketch (this will forward the sketch to the remote station with the specified address)","title":"Flashing remote station from 'Visual Studio Code' script (task) TBD"},{"location":"Developers/#pi-server-with-node-and-serial-commands-sent-using-bt-to-bt-to-rf24-gatewaydispatch-station","text":"","title":"PI Server with node and serial commands sent using bt to bt to rf24 gateway/dispatch station"},{"location":"Developers/#gateway-bt-to-rf24-dispatch-system","text":"","title":"Gateway: BT to rf24 dispatch system"},{"location":"Developers/#bootloader-with-ota-capabilities","text":"`ctrl+p Compile Bootloader with OTA Capabilities You have to bootloader option: with auto reset option and without auto reset option - to learn more read [Here] about Arduino watchdog timer. `ctrl+p Burn the compiled bootloader using the AVR flasher to learn more read [Here]. My YouTube video to get more info. Also read here to get a better understanding","title":"Bootloader with OTA Capabilities"},{"location":"Developers/#bootloader-modifications-for-ota","text":"","title":"Bootloader modifications for OTA"},{"location":"Developers/#how-to-install","text":"Download and install Visual Studio code git clone https://github.com/benchuk/SmartHomeDIY.git - clone project. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"How to install"},{"location":"Users/","text":"Users page Planned features list: IR - Broadlink or Harmony hub like - records IR commands and send them on request. Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other Arduino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Plants Water system (time and light configuration) Shutters control. Shades control. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. On wall Touch switch in parallel to digital control. IR Control for Air Condition - temp sensors. weather forecast and outside temperature and humidity - start Air Condition for x hours and auto close - with temp variation plans. Remote update the other Arduino station from RF24. Send notifications when dish washer is done (no power consumption) Central logging station Easy updates to station (download firmware from github and flash to specific address) Dynamic remote controls recording and UI setup Configuration server How to install Build the endpoint stations (soldering) Install the Raspberry Pi station using the SDCard Image or the Docker option mkdocs build - Build the documentation site. mkdocs help - Print this help message. How to use","title":"Users"},{"location":"Users/#users-page","text":"Planned features list: IR - Broadlink or Harmony hub like - records IR commands and send them on request. Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other Arduino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Plants Water system (time and light configuration) Shutters control. Shades control. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. On wall Touch switch in parallel to digital control. IR Control for Air Condition - temp sensors. weather forecast and outside temperature and humidity - start Air Condition for x hours and auto close - with temp variation plans. Remote update the other Arduino station from RF24. Send notifications when dish washer is done (no power consumption) Central logging station Easy updates to station (download firmware from github and flash to specific address) Dynamic remote controls recording and UI setup Configuration server","title":"Users page"},{"location":"Users/#how-to-install","text":"Build the endpoint stations (soldering) Install the Raspberry Pi station using the SDCard Image or the Docker option mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"How to install"},{"location":"Users/#how-to-use","text":"","title":"How to use"}]}