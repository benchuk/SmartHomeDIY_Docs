{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SmartHomeDIY Project Description Smart Home DIY This project is a DIY home automation, you can have multiple Arduino stations controlling anything at you home from your phone (webpage currently) The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync update using ssh) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino station in one common directory which all Arduino projects (stations) can reference, keeping the protocol update changes easy and safe. -------- TBD DOCS LAYOUT EXAMPLES STATIONS--------- For mote info read here: https://www.2bitornot2bit.com/blog/smart-your-home-up-with-raspberry-pi-nodejs-bluetooth-serial-and-rf24 Code layout Flashing remote station from VSCODE script (task) TBD My Youtube video to get more info. Also read here to get a better understanding How do I get set up? -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- IR UNIVERSIAL STATION PI SERVER WITH NODE AND SERIAL COMMANDS SENT USING BT TO BT TO ANT DISPATCH STATION BT TO ANT DISPATCH SYSTEM Bootloader modifications for OTA https://youtu.be/8xJqVeZkEw8 Planned features list: RF24 IR Links: Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other andruino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Water system (time and light configuration) Shutters and shades conrol. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. In paraller to manual swithces. IR Control for Aircondition - temp sensors. weather forcast and outside temperator and humidity - start aircondition for x hours and auto close - with temp variation plans. Remote update the other arduinos from ANT. Send notifications when dish washer is done (no power consumption)","title":"Welcome to SmartHomeDIY"},{"location":"#welcome-to-smarthomediy","text":"Project Description","title":"Welcome to SmartHomeDIY"},{"location":"#smart-home-diy","text":"This project is a DIY home automation, you can have multiple Arduino stations controlling anything at you home from your phone (webpage currently) The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync update using ssh) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino station in one common directory which all Arduino projects (stations) can reference, keeping the protocol update changes easy and safe. -------- TBD DOCS LAYOUT EXAMPLES STATIONS--------- For mote info read here: https://www.2bitornot2bit.com/blog/smart-your-home-up-with-raspberry-pi-nodejs-bluetooth-serial-and-rf24","title":"Smart Home DIY"},{"location":"#code-layout","text":"","title":"Code layout"},{"location":"#flashing-remote-station-from-vscode-script-task-tbd","text":"My Youtube video to get more info. Also read here to get a better understanding","title":"Flashing remote station from VSCODE script (task) TBD"},{"location":"#how-do-i-get-set-up","text":"-------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD ---------","title":"How do I get set up?"},{"location":"#ir-universial-station","text":"","title":"IR UNIVERSIAL STATION"},{"location":"#pi-server-with-node-and-serial-commands-sent-using-bt-to-bt-to-ant-dispatch-station","text":"","title":"PI SERVER WITH NODE AND SERIAL COMMANDS SENT USING BT TO BT TO ANT DISPATCH STATION"},{"location":"#bt-to-ant-dispatch-system","text":"","title":"BT TO ANT DISPATCH SYSTEM"},{"location":"#bootloader-modifications-for-ota","text":"https://youtu.be/8xJqVeZkEw8 Planned features list: RF24 IR Links: Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other andruino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Water system (time and light configuration) Shutters and shades conrol. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. In paraller to manual swithces. IR Control for Aircondition - temp sensors. weather forcast and outside temperator and humidity - start aircondition for x hours and auto close - with temp variation plans. Remote update the other arduinos from ANT. Send notifications when dish washer is done (no power consumption)","title":"Bootloader modifications for OTA"},{"location":"Developers/","text":"Welcome to SmartHomeDIY Project Description Smart Home DIY This project is a DIY home automation, you can have multiple Arduino stations controlling anything at you home from your phone (webpage currently) The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync update using ssh) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino station in one common directory which all Arduino projects (stations) can reference, keeping the protocol update changes easy and safe. -------- TBD DOCS LAYOUT EXAMPLES STATIONS--------- For mote info read here: https://www.2bitornot2bit.com/blog/smart-your-home-up-with-raspberry-pi-nodejs-bluetooth-serial-and-rf24 Code layout Flashing remote station from VSCODE script (task) TBD My Youtube video to get more info. Also read here to get a better understanding How do I get set up? -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- IR UNIVERSIAL STATION PI SERVER WITH NODE AND SERIAL COMMANDS SENT USING BT TO BT TO ANT DISPATCH STATION BT TO ANT DISPATCH SYSTEM Bootloader modifications for OTA https://youtu.be/8xJqVeZkEw8 Planned features list: RF24 IR Links: Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other andruino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Water system (time and light configuration) Shutters and shades conrol. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. In paraller to manual swithces. IR Control for Aircondition - temp sensors. weather forcast and outside temperator and humidity - start aircondition for x hours and auto close - with temp variation plans. Remote update the other arduinos from ANT. Send notifications when dish washer is done (no power consumption)","title":"Developers"},{"location":"Developers/#welcome-to-smarthomediy","text":"Project Description","title":"Welcome to SmartHomeDIY"},{"location":"Developers/#smart-home-diy","text":"This project is a DIY home automation, you can have multiple Arduino stations controlling anything at you home from your phone (webpage currently) The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync update using ssh) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino station in one common directory which all Arduino projects (stations) can reference, keeping the protocol update changes easy and safe. -------- TBD DOCS LAYOUT EXAMPLES STATIONS--------- For mote info read here: https://www.2bitornot2bit.com/blog/smart-your-home-up-with-raspberry-pi-nodejs-bluetooth-serial-and-rf24","title":"Smart Home DIY"},{"location":"Developers/#code-layout","text":"","title":"Code layout"},{"location":"Developers/#flashing-remote-station-from-vscode-script-task-tbd","text":"My Youtube video to get more info. Also read here to get a better understanding","title":"Flashing remote station from VSCODE script (task) TBD"},{"location":"Developers/#how-do-i-get-set-up","text":"-------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD ---------","title":"How do I get set up?"},{"location":"Developers/#ir-universial-station","text":"","title":"IR UNIVERSIAL STATION"},{"location":"Developers/#pi-server-with-node-and-serial-commands-sent-using-bt-to-bt-to-ant-dispatch-station","text":"","title":"PI SERVER WITH NODE AND SERIAL COMMANDS SENT USING BT TO BT TO ANT DISPATCH STATION"},{"location":"Developers/#bt-to-ant-dispatch-system","text":"","title":"BT TO ANT DISPATCH SYSTEM"},{"location":"Developers/#bootloader-modifications-for-ota","text":"https://youtu.be/8xJqVeZkEw8 Planned features list: RF24 IR Links: Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other andruino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Water system (time and light configuration) Shutters and shades conrol. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. In paraller to manual swithces. IR Control for Aircondition - temp sensors. weather forcast and outside temperator and humidity - start aircondition for x hours and auto close - with temp variation plans. Remote update the other arduinos from ANT. Send notifications when dish washer is done (no power consumption)","title":"Bootloader modifications for OTA"},{"location":"Users/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Users"},{"location":"Users/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"Users/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"Users/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}