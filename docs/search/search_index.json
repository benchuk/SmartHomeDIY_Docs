{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SmartHomeDIY This project is a DIY home automation framework. With this system you will be able to control your home lights, Air conditioning, TV, water heater any many more devices (IR, wall sockets, and light switches are only a few). The system is Arduino and Raspberry Pi based. You will be able to control your house from the internal WiFi network as well as from the Internet. For internet access you will have to use a DNS service such as no-ip You can have multiple Arduino stations controlling anything at you home. Control is done via your phone, iPad or Desktop(currently using a web page only). Installing the framework @ your home Installing this framework will require knowledge with Basic electronics, soldering. Installing the light switch control stations will require in experience with High voltage 220V/120V circuits . If you do not know how to handle High Voltage, please do not! . But the good news you can still use The IR stations to control AC, TV and such. The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe. If you are a developer and would like to contribute to the code Checkout the documentation here if you are a user wishing to use the platform at your own hose Checkout the documentation here","title":"Welcome"},{"location":"#welcome-to-smarthomediy","text":"This project is a DIY home automation framework. With this system you will be able to control your home lights, Air conditioning, TV, water heater any many more devices (IR, wall sockets, and light switches are only a few). The system is Arduino and Raspberry Pi based. You will be able to control your house from the internal WiFi network as well as from the Internet. For internet access you will have to use a DNS service such as no-ip You can have multiple Arduino stations controlling anything at you home. Control is done via your phone, iPad or Desktop(currently using a web page only).","title":"Welcome to SmartHomeDIY"},{"location":"#installing-the-framework-your-home","text":"Installing this framework will require knowledge with Basic electronics, soldering. Installing the light switch control stations will require in experience with High voltage 220V/120V circuits . If you do not know how to handle High Voltage, please do not! . But the good news you can still use The IR stations to control AC, TV and such. The Arduino stations should be flashed with the attached custom Bootloader to enable remote upload of sketches from your development computer via RF24 (instead of tearing the wall apart each time) also know as OTA (Over the Air update). Controlling you home is done via your phone browser or any other browser throw a wep application. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. This Project is managed with trello The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe. If you are a developer and would like to contribute to the code Checkout the documentation here if you are a user wishing to use the platform at your own hose Checkout the documentation here","title":"Installing the framework @ your home"},{"location":"Developers/","text":"Developers Code layout The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe. Tasks Bugs This Project is managed with trello For issues and bugs please open on Github system layout Controlling you home is done via a web application from your phone browser or any other browser. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle. Flashing remote station from VSCODE script (task) TBD My YouTube video to get more info. Also read here to get a better understanding How do I get set up? -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- IR UNIVERSAL STATION (broadlink or harmony hub like) PI SERVER WITH NODE AND SERIAL COMMANDS SENT USING BT TO BT TO ANT DISPATCH STATION GPIO Gateway: BT TO RF24 DISPATCH SYSTEM Bootloader modifications for OTA https://youtu.be/8xJqVeZkEw8 Planned features list: RF24 IR Links: Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other andruino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Water system (time and light configuration) Shutters and shades control. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. In parallel to manual switches. IR Control for Air Condition - temp sensors. weather forecast and outside temperature and humidity - start Air Condition for x hours and auto close - with temp variation plans. Remote update the other Arduino station from RF24. Send notifications when dish washer is done (no power consumption)","title":"Developers"},{"location":"Developers/#developers","text":"","title":"Developers"},{"location":"Developers/#code-layout","text":"The code is managed and developed using Visual Studio Code Multi-root Workspaces and platform.io This combination allows to develop the server side (and sync updates using ssh extension called sftp ) and the arduino station, including the bootloader code, compilation and flashing, all in one place. It also offers tasks to compile and flash the bootloader and even a predefined theme. platform.io also allowed my to have a common networking code for all Arduino stations in one common directory which all Arduino projects (stations) can reference, keeping the protocol updates and changes easy and safe.","title":"Code layout"},{"location":"Developers/#tasks-bugs","text":"This Project is managed with trello For issues and bugs please open on Github","title":"Tasks &amp; Bugs"},{"location":"Developers/#system-layout","text":"Controlling you home is done via a web application from your phone browser or any other browser. The web application is hosted on a Raspberry Pi station, running nodejs. nodejs 'talks' to a serial bluetooth attached to the Raspberry Pi GPIOs the Serial Bluetooth sends the data to an arduino station gateway which dispatches the messages to the relevant Arduino endPoint station using RF24 module. each endpoint station has a unique address and a set of command it knows to handle.","title":"system layout"},{"location":"Developers/#flashing-remote-station-from-vscode-script-task-tbd","text":"My YouTube video to get more info. Also read here to get a better understanding","title":"Flashing remote station from VSCODE script (task) TBD"},{"location":"Developers/#how-do-i-get-set-up","text":"-------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD --------- -------- TBD ---------","title":"How do I get set up?"},{"location":"Developers/#ir-universal-station-broadlink-or-harmony-hub-like","text":"","title":"IR UNIVERSAL STATION (broadlink or harmony hub like)"},{"location":"Developers/#pi-server-with-node-and-serial-commands-sent-using-bt-to-bt-to-ant-dispatch-station","text":"GPIO","title":"PI SERVER WITH NODE AND SERIAL COMMANDS SENT USING BT TO BT TO ANT DISPATCH STATION"},{"location":"Developers/#gateway-bt-to-rf24-dispatch-system","text":"","title":"Gateway: BT TO RF24 DISPATCH SYSTEM"},{"location":"Developers/#bootloader-modifications-for-ota","text":"https://youtu.be/8xJqVeZkEw8 Planned features list: RF24 IR Links: Control and configure Smart House using nodejs website from mobile. Node Running on Raspberry Pi using serial to send commands to other andruino using the Bluetooth HC05 (serial to Bluetooth chip). Auto light using light sensors. Water system (time and light configuration) Shutters and shades control. House Light control Clap to turn off/on lights. Security camera and streaming. Music remote control. Hot water auto and timer control. (turn boiler for x hours - or everyday from hour to hour) LCD Screen on main arduino to monitor and status. In parallel to manual switches. IR Control for Air Condition - temp sensors. weather forecast and outside temperature and humidity - start Air Condition for x hours and auto close - with temp variation plans. Remote update the other Arduino station from RF24. Send notifications when dish washer is done (no power consumption)","title":"Bootloader modifications for OTA"},{"location":"Users/","text":"Users page How to install mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. How to use","title":"Users"},{"location":"Users/#users-page","text":"","title":"Users page"},{"location":"Users/#how-to-install","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"How to install"},{"location":"Users/#how-to-use","text":"","title":"How to use"}]}